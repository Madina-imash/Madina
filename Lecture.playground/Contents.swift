//import UIKit
//
//var greeting = "Hello, playground"
//
//// MARK: Основы Swift. Строки.
//Логические типы и управление
//потоком.
///// Работа со строками и их методами.
///// Bool и условные операторы (if, else,
//switch).
///// Циклы (for, while).
//import UIKit
//var greeting = "Hello, World"
//var name = String()
//print(greeting)
//// Конкатенация строк — объединение
//строк с помощью оператора +:
//let full = greeting + name
//let fullGreeting = greeting + name
//print(full)
//print(fullGreeting)
//// Интерполяция строк — вставка
//значений переменных в строку с
//помощью синтаксиса \(переменная)
//let age = 18
//var birth = "12.04.01"
//let message = "My age \(age), birth
//\(birth)"
//print(message)
//let rating = 9.5
//let point: String = "Рейтинг: \
//(rating)"
//print(point)
//
//greeting = "bye"
//// Обозночение пустой строки
//var emptyString = String()
//if emptyString.isEmpty {
// print("Yes")
//} else {
// print("No")
//}
//emptyString = "Aruzhan"
//if emptyString.isEmpty {
// print("`Поле пустое")
//} else {
// print("не пустое")
//}
//print(emptyString)
//// MARK: Методы работы со строками:
////count: возвращает количество
//символов в строке.
////hasPrefix(_:): проверяет,
//начинается ли строка с заданного
//префикса.
////hasSuffix(_:): проверяет,
//заканчивается ли строка заданным
//суффиксом.
////uppercased(): преобразует все
//символы в строке к верхнему
//регистру.
////lowercased(): преобразует все
//символы к нижнему регистру.
//let text = "Swift Programming"
//print(text.count) // Вывод: 17
//print(text.hasPrefix("Swift")) //
//Вывод: true
//print(text.lowercased()) // Вывод:
//"swift programming"
//// MARK: Многосимвольные строки:
//Swift позволяет работать с
//многосимвольными строками, используя
//многострочные литералы:
//let multilineString = """
//Это многострочная строка.
//Её можно использовать для записи
//больших текстов.
//"""
////MARK: Bool, Условные Операторы
///// true false
/////
//let isSwiftGreat = true
//let isRaining = false
//var isChecked = true
///// Логические операторы:
//// && — логическое И (возвращает
//true, если оба условия истинны).
//// || — логическое ИЛИ (возвращает
//true, если хотя бы одно условие
//истинно).
//// ! — логическое НЕ (инвертирует
//значение).
//let hasLicense = true
//let hasInsurance = true
//let hascheck = false
//if hasLicense && hasInsurance {
// print("Вы можете водить
//автомобиль.")
//} else {
// print("Вы не можете водить
//автомобиль.")
//}
//if isChecked || hascheck {
// print("dsadsa")
//} else {
// print("none")
//}
//let isUserLogged = false
//if !isUserLogged {
// print("пользователь не
//авторизован")
//} else {
// print("Добро пожаловать")
//}
//// Вывод: Вы не можете водить
//автомобиль.
//let ages = 26
//if ages > 25 {
// print("aggdfagdea")
//} else if age == 25 {
// print("wow")
//} else {
// print("hhsdfjhadsb")
//}
//// MARK: Условные операторы
///// Swift предоставляет несколько видов
//условных операторов для управления
//потоком выполнения программы: if, else if,
//else, и switch.
/////Оператор if проверяет логическое
//условие, и если оно истинно (true), выполняет
//блок кода. Можно использовать операторы
//else if и else, чтобы задать дополнительные
//условия или указать действия по умолчанию.
/////
/////
//let temperature = 30
//if (temperature > 35), !hasLicense {
// print(temperature,
//"Очень жарко
//на улице")
//} else if temperature > 20 {
// print("Тепло на улице")
//} else {
// print("Прохладно на улице")
//}
/////Особенности if в Swift:
/////Скобки () для условий не обязательны, но
//могут использоваться для улучшения
//читаемости.
/////else if и else не обязательны — можно
//использовать только if.
/////
//
//// Оператор switch
///// Оператор switch используется для
//проверки значения переменной на несколько
//возможных вариантов. Он более гибкий, чем
//if, так как позволяет работать с различными
//типами данных и обрабатывать несколько
//случаев.
//let grade = "A"
//switch grade {
//case "A":
// print("Отлично!")
//case "B":
// print("Хорошо!")
//case "C":
// print("Удовлетворительно.")
//default:
// print("Нужно больше работать.")
//}
//let ages = 18
//switch ages {
//case 0..<10:
// print("Child")
//case 10..<20:
// print("Подросток")
//case 20..<30:
// print("Взрослый")
//default:
// print("Пожилой человек")
//}
////Особенности оператора switch:
////
////Switch не требует использования
//оператора break для выхода,
//выполнение прекращается после
//первого совпадения.
////Switch должен быть исчерпывающим —
//если нет обработки всех возможных
//значений, используется блок default.
//// Пример использования switch с
//диапазонами:
//let age = 18
//switch age {
//case 0..<13:
// print("Ребенок")
//case 13..<20:
// print("Подросток")
//case 20..<65:
// print("Взрослый")
//default:
// print("Пожилой человек")
//} 
//       
       
       // MARK: Основы Swift. Опционалы
       // Опционалы (Optionals) — это один из ключевых элементов языка Swift, который помогает безопасно работать с переменными, которые могут содержать либо значение, либо отсутствовать (быть nil). Опционалы позволяют избегать ошибок, связанных с доступом к отсутствующим значениям, и обеспечивают безопасность кода.

       // 1. Понятие опционалов
       /*
        В Swift переменная типа Optional может принимать два значения:

       Значение определенного типа (String, Int, Double и т.д.).
       Отсутствие значения, которое обозначается как nil.
       */


       let optionalValue = String()
       var optionalString: String? = "Алина"
       print(optionalString) // Optional("Алина")

       optionalString = nil
       print(optionalString) // nil
       // В этом примере переменная name является опциональной строкой (String?). Она сначала содержит значение "Алина", а затем ей присваивается nil, указывая на отсутствие значения.

       /* 2. Объявление опционалов
        
        Чтобы объявить переменную или константу как опциональную, используется знак вопроса ? после типа данных.*/

       var age: Int? // Опциональное целое число, изначально nil
       /* Опционалы могут быть полезны, когда значение переменной может отсутствовать, например, при чтении данных из внешнего источника или при работе с пользовательским вводом.*/

       // MARK: 3. Разворачивание (unwrapping) опционалов
       /* Перед тем, как использовать значение опционала, его необходимо "развернуть", чтобы получить настоящее значение. Существует несколько способов сделать это:
        
        3.1. Принудительное разворачивание (!)
        Если вы уверены, что опционал не равен nil, можно использовать ! для принудительного разворачивания.*/

       var optionalName: String? = nil
       print(optionalName!)




       /* Важно: Если опционал равен nil, попытка принудительного разворачивания вызовет ошибку времени выполнения (runtime error).*/

       /* 3.2. Проверка на nil и безопасное разворачивание
        Проверка на наличие значения (nil) перед использованием помогает избежать ошибок. */

       var numberOpt = Int()
       var optionalNumber: Int? = 42


       if optionalNumber != nil {
           print("Число равно \(optionalNumber!)")
       } else {
           print("Значение отсутствует")
       }

       /* 3.3. Опциональное привязывание (Optional Binding)
        Для безопасного разворачивания можно использовать конструкцию if let или guard let. */

       if let unwrappedName = optionalName {
           print("Имя: \(unwrappedName)")
       } else {
           print("Имя отсутствует")
       } // Здесь unwrappedName получает значение optionalName, если оно не равно nil. В противном случае выполняется блок else.

       /* Аналогично if let, оператор guard let также используется для безопасного разворачивания, но в отличие от if, он помогает выйти из текущего блока кода, если опционал равен nil. */
       func printName(_ name: String?) {
           guard let unwrappedName = name else {
       //        print("Имя отсутствует")
               return
           }
           print("Имя: \(unwrappedName)")
       }

       printName(optionalName)

       /* 3.4. Оператор объединения с nil (??)
       Оператор ?? позволяет задать значение по умолчанию, если опционал равен nil.*/

       var guestName: String? = nil


       guestName = "Madina"

       let displayName = guestName ?? "Гость"
       print(displayName) //Здесь, если guestName равно nil, используется значение по умолчанию "Гость".






       // MARK: Функция
       // Функция — это самостоятельный блок кода, выполняющий определенное действие. Функции позволяют структурировать программу, разбивать ее на логические блоки и избегать дублирования кода. В Swift функции могут принимать параметры, возвращать значения и вызываться многократно в различных частях программы.
       //1. Объявление и Вызов Функций
       // MARK: Пример вызова функций
       func sayHello() {
           print("Hello")
       }


       sayHello()
       // В данном примере функция sayHello просто выводит текст на экран. Она не принимает никаких параметров и не возвращает значения.

       // MARK: Пример 2: Функция с параметрами
       // Параметры позволяют передавать функции данные для обработки. Параметры объявляются внутри круглых скобок.

       func greet(name: String) {
           print("Привет, \(name)!")
       }

       greet(name: "Дима")

       greet(name: "")
       //Здесь функция greet(name:) принимает один параметр name типа String и использует его для отображения приветственного сообщения.

       // MARK: Пример 3: Функция с возвращаемым значением
       //Функция может вернуть результат своей работы. Возвращаемый тип указывается после стрелки ->
       let a = 3
       let b = 5
       let q = a + b



       func add(a: Int, b: Int) -> String {
           return "\(a + b)"
       }

       let sum = add(a: 20, b: 609)
       //let sum = add(a: 10, b: 15)
       // Функция add(a:b:) принимает два целых числа, складывает их и возвращает результат типа Int.
       print(sum)


       let c = add(a: 20, b: 20   )
       let d = add(a: 200, b: 2000)
       // MARK: 2. Параметры функции и их виды
       //В Swift параметры функции могут иметь метки (labels) и имена. Метки используются для удобства вызова функции, а имена — внутри тела функции.



       func multiply(number1 x: Int, number2 y: Int) -> Int {
           return x * y
       }
       // Вызов функции с метками параметров

       let n = multiply(number1: 10, number2: 10)
       print(n)
       // В данном примере number1 и number2 — метки параметров, а x и y — внутренние имена, используемые внутри функции.

       // MARK: 3. Параметры по умолчанию
       // В Swift можно задавать значения параметров по умолчанию. Это позволяет вызывать функцию без указания некоторых аргументов.
       //MARK: Пример 5: Параметры по умолчанию

       func greetUser(name: String = "Гость") {
           print("Добро пожаловать, \(name)!")
       }

       // Вызов функции без аргумента
       greetUser()

       // Вызов функций с аргументами
       greetUser(name: "Дима")
       // Здесь, если параметр name не передан при вызове функции, используется значение по умолчанию — "Гость".



       // MARK: Даты
       /* Работа с датами и временем — важная часть программирования, особенно при создании приложений, которые должны отслеживать события или учитывать время выполнения операций. В Swift для работы с датами и временем используются такие классы и структуры, как Date, DateFormatter, Calendar, DateComponents и другие.
        
        1. Класс Date

        Класс Date представляет определенную точку времени, которая хранится в виде количества секунд, прошедших с 1 января 2001 года по Гринвичу (UTC).

        Пример: Создание и отображение текущей даты*/

       let currentDate = Date()
       print(currentDate)// Переменная currentDate содержит текущую дату и время.

       /* MARK: 2. DateFormatter
        DateFormatter используется для преобразования объектов Date в строки и наоборот. Это удобно для отображения дат в пользовательском интерфейсе, а также для парсинга строк с датами.

        Основные методы и примеры использования
        Преобразование Date в строку

        Для форматирования даты в строку нужно задать формат и локаль:
        */

       let formatter = DateFormatter()
       formatter.dateFormat = "h:mm a"
       formatter.locale = Locale(identifier: "kz_KZ")

       let dateString = formatter.string(from: currentDate)
       print("Строковое представление даты: \(dateString)")



       /*
        MARK: 3. Calendar

        Calendar используется для более детальной работы с датами, например, для получения отдельных компонентов (год, месяц, день) или выполнения арифметических операций над датами (прибавление дней, месяцев и т.д.).

        Основные методы и примеры использования
        Получение компонентов даты

        С помощью Calendar можно получить год, месяц, день, час, минуту и другие компоненты даты:*/

       let calendar = Calendar.current

       let year = calendar.component(.weekday, from: currentDate)
       let month = calendar.component(.month, from: currentDate)
       let day = calendar.component(.day, from: currentDate)

       print("Год: \(year), Месяц: \(month), День: \(day)")
       /* MARK: Символы
        В Swift работа с символами реализована с помощью типа Character. Символы представляют собой одиночные буквенные, числовые или специальные символы и являются составной частью строк. В этой лекции мы рассмотрим, что такое Character, как создавать, использовать и обрабатывать символы, а также как взаимодействовать с ними в Swift.
        
        Character — это базовый тип, представляющий один символ. В отличие от строк (String), которые могут содержать несколько символов, Character хранит только один. Символы могут быть буквами, цифрами, знаками пунктуации, а также эмодзи или другими специальными символами, которые могут быть представлены одним или несколькими байтами.
        
        MARK: 2. Создание и использование символов
        */

       let letter: Character = "A" // Латинская буква
       let digit: Character = "9"  // Цифра
       let emoji: Character = "🐶" // Эмодзи (собака)
